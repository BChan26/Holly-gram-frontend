[{"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/index.js":"1","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/App.js":"2","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/SignIn.jsx":"3","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Feed.jsx":"4","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Register.jsx":"5","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Home.jsx":"6","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Nav.jsx":"7"},{"size":320,"mtime":1670017455113,"results":"8","hashOfConfig":"9"},{"size":3825,"mtime":1670017455106,"results":"10","hashOfConfig":"9"},{"size":3657,"mtime":1670044129618,"results":"11","hashOfConfig":"9"},{"size":6767,"mtime":1670269343009,"results":"12","hashOfConfig":"9"},{"size":4473,"mtime":1670044129616,"results":"13","hashOfConfig":"9"},{"size":1294,"mtime":1670017455110,"results":"14","hashOfConfig":"9"},{"size":1005,"mtime":1670044129615,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"aml4kb",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/index.js",[],[],"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/App.js",["38"],[],"////Imports for authentication\n// import { useEffect, useState } from 'react'\nimport { Route, Routes } from 'react-router-dom'\n// import { CheckSession } from './services/Auth'\n\nimport { Link } from 'react-router-dom'\nimport Register from './components/Register'\nimport SignIn from './components/SignIn'\nimport Feed from './components/Feed'\nimport Home from './components/Home'\nimport './App.css';\n\nfunction App() {\n//   const [authenticated, toggleAuthenticated] = useState(false)\n//   const [user, setUser] = useState(null)\n\n//   const handleLogOut = () => {\n//     //Reset all auth related state and clear localStorage\n//     setUser(null)\n//     toggleAuthenticated(false)\n//     localStorage.clear()\n//   }\n\n// //Persisting Logged In Users\n// // Nothing is more frustrating to a user than an application that constantly kicks them back to a log in screen when they refresh. Luckily, that's a simple fix.\n\n// // What we'll do here is add some logic to check if a token is already stored in localStorage. If it is, we'll make a request to a route in our back-end that will validate and decrypt the currently stored token. This decrypted token will contain the same information about the user that we stored after signing in.\n\n// //Next, we'll create a method called checkToken that will make a GET request to our back-end with the currently stored token to check it's validity:\n\n//   //Here, we'll invoke the CheckSession function and store the returned information in a variable called user:\n//   const checkToken = async () => {\n//     const user = await CheckSession()\n//     //Next, we'll store this returned user in state using the setUser method:\n//     setUser(user)\n//     //Finally, we'll toggle the authenticated state:\n//     toggleAuthenticated(true)\n//   }\n\n// // We'll utilize useEffect to check if a token exists currently. If and only if a token exists, we'll invoke our checkToken function:\n//   useEffect(()=> {\n//     const token = localStorage.getItem('token')\n//     if (token) {\n//       checkToken()\n//     }\n//   }, [])\n\n\n\n\n  return (\n    <div className=\"App\">\n      {/* <Home\n        // authenticated={authenticated}\n        // user={user}\n        // handleLogOut={handleLogOut}\n      /> */}\n\n    <main>\n        <Routes>\n          <Route path=\"/\" element={<Home/>} />\n          {/* Now that our registration functionality is set up, we can focus on letting a user sign in to our application.\n          We'll start by providing setUser and toggleAuthenticated to the SignIn component as props in App.js: */}\n          <Route path=\"/SignIn\" element={<SignIn \n                                          // setUser={setUser}\n                                          // toggleAuthenticated={toggleAuthenticated}\n                                          />} />\n          <Route path=\"/Register\" element={<Register />} />\n          {/* Protected Routes are routes that can only be accessed if a condition is met (usually, if user is properly authenticated). It returns the component or redirects a user to another route based on a set condition. \n          In App.js, let's pass our user and authenticated states as props to our Feed component... */}\n          <Route path=\"/Feed\" element={<Feed \n                                        // user={user} \n                                        // authenticated={authenticated}\n                                        />} />\n        </Routes>\n      </main>\n\n\n\n    {/* <Link to= \"/\">\n      <div>❄️Holly-Gram Home Page❄️</div>\n    </Link>\n    <br/>\n    <br/>\n    <Routes>\n    <Route exact path=\"/\"     element={<Home/>}/>\n    <Route exact path=\"Feed\"     element={<Feed/>}/>\n    <Route exact path=\"SignIn\"     element={<SignIn/>}/>\n    <Route exact path=\"Register\"   element={<Register/>}/>\n    </Routes> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/SignIn.jsx",["39"],[],"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Feed.jsx",["40","41","42"],[],"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Register.jsx",["43"],[],"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Home.jsx",[],[],"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Nav.jsx",["44","45"],[],{"ruleId":"46","severity":1,"message":"47","line":6,"column":10,"nodeType":"48","messageId":"49","endLine":6,"endColumn":14},{"ruleId":"50","severity":1,"message":"51","line":53,"column":13,"nodeType":"52","endLine":53,"endColumn":65},{"ruleId":"46","severity":1,"message":"53","line":2,"column":8,"nodeType":"48","messageId":"49","endLine":2,"endColumn":17},{"ruleId":"46","severity":1,"message":"54","line":51,"column":11,"nodeType":"48","messageId":"49","endLine":51,"endColumn":16},{"ruleId":"50","severity":1,"message":"51","line":95,"column":33,"nodeType":"52","endLine":95,"endColumn":53},{"ruleId":"50","severity":1,"message":"51","line":52,"column":9,"nodeType":"52","endLine":52,"endColumn":38},{"ruleId":"46","severity":1,"message":"55","line":2,"column":8,"nodeType":"48","messageId":"49","endLine":2,"endColumn":19},{"ruleId":"50","severity":1,"message":"51","line":14,"column":9,"nodeType":"52","endLine":14,"endColumn":51},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Hollygram' is defined but never used.","'data1' is assigned a value but never used.","'NavBarIcons' is defined but never used."]