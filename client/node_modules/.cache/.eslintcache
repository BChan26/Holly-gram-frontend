[{"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/index.js":"1","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/App.js":"2","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/SignIn.jsx":"3","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Feed.jsx":"4","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Register.jsx":"5","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Home.jsx":"6","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Nav.jsx":"7"},{"size":320,"mtime":1670017455113,"results":"8","hashOfConfig":"9"},{"size":3825,"mtime":1670017455106,"results":"10","hashOfConfig":"9"},{"size":3657,"mtime":1670021209742,"results":"11","hashOfConfig":"9"},{"size":3942,"mtime":1670017455110,"results":"12","hashOfConfig":"9"},{"size":4473,"mtime":1670021223466,"results":"13","hashOfConfig":"9"},{"size":1294,"mtime":1670017455110,"results":"14","hashOfConfig":"9"},{"size":765,"mtime":1670017455111,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"aml4kb",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/index.js",[],[],"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/App.js",["40"],[],"////Imports for authentication\n// import { useEffect, useState } from 'react'\nimport { Route, Routes } from 'react-router-dom'\n// import { CheckSession } from './services/Auth'\n\nimport { Link } from 'react-router-dom'\nimport Register from './components/Register'\nimport SignIn from './components/SignIn'\nimport Feed from './components/Feed'\nimport Home from './components/Home'\nimport './App.css';\n\nfunction App() {\n//   const [authenticated, toggleAuthenticated] = useState(false)\n//   const [user, setUser] = useState(null)\n\n//   const handleLogOut = () => {\n//     //Reset all auth related state and clear localStorage\n//     setUser(null)\n//     toggleAuthenticated(false)\n//     localStorage.clear()\n//   }\n\n// //Persisting Logged In Users\n// // Nothing is more frustrating to a user than an application that constantly kicks them back to a log in screen when they refresh. Luckily, that's a simple fix.\n\n// // What we'll do here is add some logic to check if a token is already stored in localStorage. If it is, we'll make a request to a route in our back-end that will validate and decrypt the currently stored token. This decrypted token will contain the same information about the user that we stored after signing in.\n\n// //Next, we'll create a method called checkToken that will make a GET request to our back-end with the currently stored token to check it's validity:\n\n//   //Here, we'll invoke the CheckSession function and store the returned information in a variable called user:\n//   const checkToken = async () => {\n//     const user = await CheckSession()\n//     //Next, we'll store this returned user in state using the setUser method:\n//     setUser(user)\n//     //Finally, we'll toggle the authenticated state:\n//     toggleAuthenticated(true)\n//   }\n\n// // We'll utilize useEffect to check if a token exists currently. If and only if a token exists, we'll invoke our checkToken function:\n//   useEffect(()=> {\n//     const token = localStorage.getItem('token')\n//     if (token) {\n//       checkToken()\n//     }\n//   }, [])\n\n\n\n\n  return (\n    <div className=\"App\">\n      {/* <Home\n        // authenticated={authenticated}\n        // user={user}\n        // handleLogOut={handleLogOut}\n      /> */}\n\n    <main>\n        <Routes>\n          <Route path=\"/\" element={<Home/>} />\n          {/* Now that our registration functionality is set up, we can focus on letting a user sign in to our application.\n          We'll start by providing setUser and toggleAuthenticated to the SignIn component as props in App.js: */}\n          <Route path=\"/SignIn\" element={<SignIn \n                                          // setUser={setUser}\n                                          // toggleAuthenticated={toggleAuthenticated}\n                                          />} />\n          <Route path=\"/Register\" element={<Register />} />\n          {/* Protected Routes are routes that can only be accessed if a condition is met (usually, if user is properly authenticated). It returns the component or redirects a user to another route based on a set condition. \n          In App.js, let's pass our user and authenticated states as props to our Feed component... */}\n          <Route path=\"/Feed\" element={<Feed \n                                        // user={user} \n                                        // authenticated={authenticated}\n                                        />} />\n        </Routes>\n      </main>\n\n\n\n    {/* <Link to= \"/\">\n      <div>❄️Holly-Gram Home Page❄️</div>\n    </Link>\n    <br/>\n    <br/>\n    <Routes>\n    <Route exact path=\"/\"     element={<Home/>}/>\n    <Route exact path=\"Feed\"     element={<Feed/>}/>\n    <Route exact path=\"SignIn\"     element={<SignIn/>}/>\n    <Route exact path=\"Register\"   element={<Register/>}/>\n    </Routes> */}\n\n    </div>\n  );\n}\n\nexport default App;\n","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/SignIn.jsx",["41"],[],"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Feed.jsx",["42","43"],[],"import Nav from './Nav'\nimport Hollygram from '../assets/Hollygram.png'\nimport RegisterPageIcon from '../assets/RegisterPageIcon.png'\n\nimport { useEffect, useState } from 'react'\n// import { GetPosts } from '../services/PostServices'\n\n// We'll need useNavigate again for this next part:\n// import { useNavigate } from 'react-router-dom'\n\n// Over in Feed.js, let's be sure and pass those props in. We'll destructure them...\n\n\nexport default function Feed () {\n\n  \n        const [users, setUsers] = useState([])\n        \n        useEffect(() => {\n        const handleUsers = async () => {\n            const data = await fetch(\"http://localhost:3000/feed\")\n            console.log(data)\n            const us = await data.json()\n            setUsers(us.userdata)\n            console.log(us)\n            const data1 = { username: 'example' };\nawait fetch('http://localhost:3000', {\n  method: 'POST', // or 'PUT'\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(data1),})\n        }\n        handleUsers()\n        }, [])  \n\n\n// export default function Feed ({user, authenticated}) {\n        // let navigate = useNavigate()\n\n\n        // const [posts, setPosts] = useState([])\n        \n        // useEffect(() => {\n        // const handlePosts = async () => {\n        //     const data = await GetPosts()\n        //     setPosts(data)\n        // }\n        // handlePosts()\n        // }, [])\n        \n\n\n//We're going to wrap the JSX in our return statement in a ternary that checks if a) our user exists and b) that they are authenticated. If authenticated, we'll show the posts on the feed! If not, we need to send our user back to the Sign In page.\n  //First, let's set up that ternary. We want to check if both conditions are true, so we'll use &&:\n// return (user && authenticated) ?  (\n\nreturn (\n<div>\n\n    <div id=\"NavBarLocation\">\n    <Nav/>\n    </div>\n\n    <div id='FeedContent'>\n\n        <div className=\"FeedPosts\">\n        <h1>HollyGram Mapped Feed</h1>\n\n                {/* Check to make these values match the postdata */}\n                <div className=\"IndividualFeedPosts\">\n                {/* {posts.map((post) => (\n                    <div className=\"card\" key={post.id}>\n                    <div>\n                        <img src={post.picture} alt=\"post\"/>\n                    </div>\n                    <p>{post.postText}</p>\n                    </div>\n                ))} */}\n\n                                {users.map((user) => (\n                    <div className=\"card\">\n                    <p>{user.name}</p>\n                    <img className=\"pics\" style={{ display: 'block' }} src={user.image} alt={user.name} />\n                    </div>\n                ))}\n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    {/* Template written out*/}\n                    \n                    <div className=\"TopOfPost\">\n                        <img src={Hollygram}/>\n                        <h3>UserName</h3>\n                    </div>\n\n                    <div className=\"PictureOfPost\">\n                        <img src={RegisterPageIcon}/>\n                    </div>\n\n                    <div className=\"LikesCommentsOfPost\">\n                        <h4>Like</h4>\n                        <h4>Comment</h4>\n                        <h4>Tags</h4>\n                    </div>\n                    \n                </div>\n\n                <br/>\n\n        </div>\n\n        <div className=\"SuggestionsForYou\">\n        <h1>Where We'll Put Profile Info for User</h1>\n        </div>\n\n    </div>\n</div>\n    // )\n    //   // Next, we'll set up the JSX for an unauthenticated user:\n    // : (\n    //     <div className=\"protected\">\n    //       <h3>Oops! You must be signed in to do that!</h3>\n    //       <button onClick={()=> navigate('/SignIn')}>Sign In</button>\n    //     </div>\n    //   )\n// }\n)}","/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Register.jsx",["44"],[],"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Home.jsx",[],[],"/Users/mac/Desktop/GA/unit3/Holly-gram-frontend/client/src/components/Nav.jsx",["45","46"],[],"import Hollygram from '../assets/Hollygram.png'\nimport NavBarIcons from '../assets/NavBarIcons.png'\n\nexport default function Nav () {\n    return (\n    <div id='NavBarContent'>\n\n        <div id=\"NavBarLogo\">\n        <img id =\"HollyGramLogo\" src={Hollygram}/>\n        </div>\n\n        <div id=\"NavBarSearchBar\">\n                <form id=\"SearchBar\">\n                                        \n                    <label>\n                    Search\n                    <input type=\"text\" name=\"Search\" />\n                    </label>\n                                        \n                    <input type=\"submit\" value=\"Go\" />\n                </form>\n            </div>\n\n        <div id=\"NavBarIcons\">\n        <img src={NavBarIcons}/>\n        </div>\n\n    </div>\n    )}",{"ruleId":"47","severity":1,"message":"48","line":6,"column":10,"nodeType":"49","messageId":"50","endLine":6,"endColumn":14},{"ruleId":"51","severity":1,"message":"52","line":53,"column":13,"nodeType":"53","endLine":53,"endColumn":65},{"ruleId":"51","severity":1,"message":"52","line":97,"column":25,"nodeType":"53","endLine":97,"endColumn":47},{"ruleId":"51","severity":1,"message":"52","line":102,"column":25,"nodeType":"53","endLine":102,"endColumn":54},{"ruleId":"51","severity":1,"message":"52","line":52,"column":9,"nodeType":"53","endLine":52,"endColumn":38},{"ruleId":"51","severity":1,"message":"52","line":9,"column":9,"nodeType":"53","endLine":9,"endColumn":51},{"ruleId":"51","severity":1,"message":"52","line":25,"column":9,"nodeType":"53","endLine":25,"endColumn":33},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]